download coppelia sim normally (specific version is 4.3.0 rev 12

add to bashrc (replace the directory with wherever you put coppeliasim)
	export COPPELIASIM_ROOT_DIR="/home/rajbhandari/Downloads/CoppeliaSim_Edu_V4_3_0_rev12_Ubuntu20_04"
	alias coppelia="$COPPELIASIM_ROOT_DIR/coppeliaSim.sh"

install zmq package to coppeliasim
	https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm
	
add to bashrc
	export PYTHONPATH="$PYTHONPATH:$COPPELIASIM_ROOT_DIR/programming/zmqRemoteApi/clients/python"

ROS2 foxy was installed on computer already
install the ros2 coppelia package
	make ros2_ws/src directory in home
	put in the sim_ros2_interface directory (name is important)
		https://github.com/CoppeliaRobotics/simExtROS2
		HOWEVER, we used a custom one, look at downloads/ask rachel?
	install all the dependencies in the github https://github.com/CoppeliaRobotics/simExtROS2
		sudo apt-get install xsltproc
		python3 -m pip install xmlschema
	build the ros2 package (run in ros2_ws/src directory)
		colcon build --symlink-install

copy all the lua files from wallclimbsim folder (ask rachel for this) into the coppelia lua folder
	 blimp.lua, blimpHeader.lua, common.lua, rosMsg.lua
	 put them in: <coppelia_dir>/lua

	FOR COMMON.LUA:
		this is a utility function list
		I combined the ones rom ankicoppeliasim and wallclimbsim manually (just copy and pasting the union
	FOR ROSMSG.LUA
		used anki one since it had more stuff
	
	for both of these, just using the blimp one should work for the blimp sim
this should be ready to run the starter code

TESTS:

for zmq:
	To test that ZeroMQ is set up correctly, 
	open any scene in Coppeliasim (having dynamic objects in the scene can help verify 
	visually that things are working correctly, such as adding a 
	sphere and putting it to a positive z height so it would fall 
	when the simulation starts).

	Then, run the "testZeroMQRemoteAPI.py" file through 
	"python3 testZeroMQRemoteAPI.py" at the terminal command line 
	(make sure python path was set correctly as described above). 
	The simulation should start, run for 3 seconds, and then end.

for ros2:
	https://www.coppeliarobotics.com/helpFiles/en/ros2Tutorial.htm
	follow the tests after the run stuff
